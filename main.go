package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Config struct {
	Token  string `json:"token"`
	UserID int64  `json:"user_id"`
}

func loadConfig(path string) (*Config, error) {
	data, err := os.ReadFile(path)
	if err != nil {
		return nil, err
	}
	var cfg Config
	if err := json.Unmarshal(data, &cfg); err != nil {
		return nil, err
	}
	return &cfg, nil
}

func saveConfig(path string, cfg *Config) error {
	data, err := json.MarshalIndent(cfg, "", "  ")
	if err != nil {
		return err
	}
	return os.WriteFile(path, data, 0600)
}

func main() {
	configPath := "config.json"

	var cfg *Config
	var err error

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥
	if _, err = os.Stat(configPath); os.IsNotExist(err) {
		var token string
		var userID int64

		fmt.Print("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: ")
		fmt.Scanln(&token)

		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID: ")
		fmt.Scanln(&userID)

		cfg = &Config{Token: token, UserID: userID}
		if err := saveConfig(configPath, cfg); err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞:", err)
			return
		}
	} else {
		cfg, err = loadConfig(configPath)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞:", err)
			return
		}
	}

	// –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
	var notesDir string
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫: ")
	fmt.Scanln(&notesDir)
	if err := os.MkdirAll(notesDir, 0755); err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏:", err)
		return
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(cfg.Token)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:", err)
		return
	}

	fmt.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –∂–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏—è...")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		// —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ ID
		if update.Message.From.ID != cfg.UserID {
			continue
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
		filename := fmt.Sprintf("%d_%d.md", update.UpdateID, time.Now().Unix())
		filepathMD := filepath.Join(notesDir, filename)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
		content := fmt.Sprintf("# –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s\n\n%s\n\n", update.Message.From.UserName, update.Message.Text)

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (–¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ñ–æ—Ç–æ)
		if update.Message.Document != nil {
			file := update.Message.Document
			url, _ := bot.GetFileDirectURL(file.FileID)
			localFile := filepath.Join(notesDir, file.FileName)
			if err := downloadFile(localFile, url); err == nil {
				content += fmt.Sprintf("üìé –í–ª–æ–∂–µ–Ω–∏–µ: [%s](%s)\n", file.FileName, file.FileName)
			}
		}
		if len(update.Message.Photo) > 0 {
			photo := update.Message.Photo[len(update.Message.Photo)-1]
			url, _ := bot.GetFileDirectURL(photo.FileID)
			localFile := filepath.Join(notesDir, fmt.Sprintf("photo_%d.jpg", time.Now().Unix()))
			if err := downloadFile(localFile, url); err == nil {
				content += fmt.Sprintf("üñº –§–æ—Ç–æ: ![](%s)\n", filepath.Base(localFile))
			}
		}

		// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ md —Ñ–∞–π–ª
		if err := os.WriteFile(filepathMD, []byte(content), 0644); err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–º–µ—Ç–∫–∏:", err)
			continue
		}
		fmt.Println("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞:", filepathMD)
	}
}

func downloadFile(path, url string) error {
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	out, err := os.Create(path)
	if err != nil {
		return err
	}
	defer out.Close()

	_, err = io.Copy(out, resp.Body)
	return err
}
